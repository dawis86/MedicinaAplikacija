package Veidlapa;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Vector;
import java.util.regex.Pattern;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class MedicinasVeidlapa extends JFrame {

	private static final long serialVersionUID = 1L;

	// Dinamiskie ceƒºi, kas pielƒÅgojas jebkuram datoram
	private static final Path DESKTOP_PATH = Paths.get(System.getProperty("user.home"), "Desktop");
	private static final Path BASE_DIRECTORY = DESKTOP_PATH.resolve("MedicinaSlimnicaVeidlapas");
	private static final Path EXCEL_TEMPLATE_PATH = BASE_DIRECTORY.resolve("Medicina_slimnƒ´cai.xlsx");
	private static final Path OUTPUT_DIRECTORY = BASE_DIRECTORY.resolve("IzveidotƒÅs_Veidlapas");
	private static final Path GIMENES_ARSTI_FILE = BASE_DIRECTORY.resolve("gimenes_arsti.txt");
	private static final Path PSIHIATRI_FILE = BASE_DIRECTORY.resolve("arsti_psihiatri.txt");
	private static final Path MEDIKAMENTI_FILE = BASE_DIRECTORY.resolve("medikamenti.txt");
	private static final Path PREFERENCES_FILE = BASE_DIRECTORY.resolve("app_preferences.txt");

	private Vector<String> medikamentiList;

	private ComboBoxWithSearch activeMedikamentComboBox = null;

	private JTextField vardsUzvardsField;
	private JTextField personasKodsField;
	private JTextField pilniGadiField;
	private JComboBox<String> invaliditatesGrupaComboBox;
	private JTextField iestajiesSACField;
	private JComboBox<String> gimenesArstsComboBox;
	private JComboBox<String> psihiatrsComboBox;
	private ComboBoxWithSearch[] medikamentuComboBoxes;
	private JComboBox<String> klientuSarakstsComboBox;

	private JButton saveButton;
	private JLabel statusBar;

	private final Color mandatoryFieldColor = new Color(255, 255, 204);
	private final Color errorColor = new Color(255, 204, 204);
	private final Pattern personasKodsPattern = Pattern.compile("\\d{6}-\\d{5}");

	public MedicinasVeidlapa() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}

		setupApplicationFoldersAndFiles();

		// Uzlabota dizaina elementi
		Font mainFont = new Font("Segoe UI", Font.PLAIN, 16);
		Font titleFont = new Font("Segoe UI", Font.BOLD, 22);
		Font buttonFont = mainFont.deriveFont(Font.BOLD);
		Color backgroundColor = new Color(245, 245, 245); // Gai≈°i pelƒìks fons
		Color panelColor = Color.WHITE;
		Color primaryColor = new Color(50, 150, 250); // Zils
		Color secondaryColor = new Color(100, 200, 100); // Zaƒº≈°

		UIManager.put("Label.font", mainFont);
		UIManager.put("TextField.font", mainFont);
		UIManager.put("ComboBox.font", mainFont);
		UIManager.put("Button.font", buttonFont);
		UIManager.put("TitledBorder.font", titleFont);
		UIManager.put("Panel.background", backgroundColor);
		UIManager.put("OptionPane.messageFont", mainFont);
		UIManager.put("OptionPane.buttonFont", buttonFont);

		setTitle("üè• Medicƒ´nas Veidlapa");
		loadPreferences();
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		setLocationRelativeTo(null);
		setLayout(new BorderLayout(15, 15));
		setBackground(backgroundColor);

		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				int result = JOptionPane.showConfirmDialog(MedicinasVeidlapa.this,
						"Vai tie≈°ƒÅm vƒìlaties aizvƒìrt programmu?", "ApstiprinƒÅt aizvƒìr≈°anu", JOptionPane.YES_NO_OPTION);
				if (result == JOptionPane.YES_OPTION) {
					savePreferences();
					dispose();
				}
			}

			@Override
			public void windowDeactivated(WindowEvent e) {
				savePreferences();
			}
		});

		statusBar = new JLabel("Gatavs.");
		statusBar.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(200, 200, 200)),
				BorderFactory.createEmptyBorder(8, 10, 8, 10)));
		statusBar.setFont(mainFont.deriveFont(Font.ITALIC, 14f));
		statusBar.setBackground(new Color(230, 230, 230));
		statusBar.setOpaque(true);

		JPanel mainPanel = new JPanel(new BorderLayout(15, 15));
		mainPanel.setBackground(backgroundColor);
		mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

		JPanel formPanel = new JPanel();
		formPanel.setBackground(panelColor);
		formPanel.setLayout(new BorderLayout(15, 15));

		JPanel clientInfoPanel = createClientInfoPanel();
		JPanel doctorsPanel = createDoctorsPanel();
		JPanel medikamentiPanel = createMedikamentiPanel();

		JPanel topSectionPanel = new JPanel(new GridLayout(2, 1, 15, 15));
		topSectionPanel.setOpaque(false);
		topSectionPanel.add(clientInfoPanel);
		topSectionPanel.add(doctorsPanel);

		formPanel.add(topSectionPanel, BorderLayout.NORTH);
		formPanel.add(medikamentiPanel, BorderLayout.CENTER);

		JScrollPane scrollPane = new JScrollPane(formPanel);
		scrollPane.getVerticalScrollBar().setUnitIncrement(16);
		scrollPane.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200), 1));
		scrollPane.getViewport().setBackground(panelColor);

		mainPanel.add(scrollPane, BorderLayout.CENTER);

		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
		buttonPanel.setBackground(backgroundColor);

		JButton helpButton = new JButton("‚ÑπÔ∏è Palƒ´dzƒ´ba");
		JButton saveButton = new JButton("üíæ SaglabƒÅt veidlapu");
		JButton viewButton = new JButton("üìÑ Apskatƒ´t veidlapu");
		JButton printButton = new JButton("üñ®Ô∏è DrukƒÅt veidlapu");

		setupButton(helpButton, new Color(220, 220, 220), new Color(255, 230, 150));
		setupButton(saveButton, new Color(220, 220, 220), new Color(255, 230, 150));
		setupButton(viewButton, new Color(220, 220, 220), new Color(255, 230, 150));
		setupButton(printButton, new Color(220, 220, 220), new Color(255, 230, 150));

		this.saveButton = saveButton;

		helpButton.setFont(buttonFont);
		helpButton.addActionListener(e -> {
			JOptionPane.showMessageDialog(this,
					"1. Aizpildiet visus laukus.\n" + "2. Spiediet 'SaglabƒÅt veidlapu'.\n"
							+ "3. Ja nepiecie≈°ams, varat drukƒÅt vai apskatƒ´t veidlapu.\n\n"
							+ "JautƒÅjumu gadƒ´jumƒÅ jautƒÅjiet vadƒ´tƒÅjam vai kolƒìƒ£iem.",
					"Palƒ´dzƒ´ba", JOptionPane.INFORMATION_MESSAGE);
		});
		saveButton.setFont(buttonFont);
		saveButton.addActionListener(new SaveActionListener());
		saveButton.setEnabled(false);

		viewButton.setFont(buttonFont);
		viewButton.addActionListener(new ViewActionListener());

		printButton.setFont(buttonFont);
		printButton.addActionListener(new PrintActionListener());

		buttonPanel.add(helpButton);
		buttonPanel.add(saveButton);
		buttonPanel.add(viewButton);
		buttonPanel.add(printButton);

		JPanel bottomPanel = new JPanel(new BorderLayout());
		bottomPanel.setBackground(backgroundColor);
		bottomPanel.add(buttonPanel, BorderLayout.CENTER);
		bottomPanel.add(statusBar, BorderLayout.SOUTH);

		add(mainPanel, BorderLayout.CENTER);
		add(bottomPanel, BorderLayout.SOUTH);

		addValidationListeners();
		checkFormValidity();

		SwingUtilities.invokeLater(() -> vardsUzvardsField.requestFocusInWindow());
	}

	private void setupButton(JButton button, Color defaultColor, Color hoverColor) {
		button.setBackground(defaultColor);
		button.setForeground(Color.BLACK);
		button.setFocusPainted(false);
		button.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(new Color(150, 150, 150)),
				BorderFactory.createEmptyBorder(8, 15, 8, 15)));
		button.setOpaque(true);

		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				if (button.isEnabled()) {
					button.setBackground(hoverColor);
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {
				if (button.isEnabled()) {
					button.setBackground(defaultColor);
				}
			}
		});
	}

	private void setupApplicationFoldersAndFiles() {
		try {
			Files.createDirectories(BASE_DIRECTORY);
			Files.createDirectories(OUTPUT_DIRECTORY);

			copyResourceToFile("Medicina_slimnƒ´cai.xlsx", EXCEL_TEMPLATE_PATH);
			copyResourceToFile("gimenes_arsti.txt", GIMENES_ARSTI_FILE);
			copyResourceToFile("arsti_psihiatri.txt", PSIHIATRI_FILE);
			copyResourceToFile("medikamenti.txt", MEDIKAMENTI_FILE);
			copyResourceToFile("app_preferences.txt", PREFERENCES_FILE);
		} catch (IOException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this,
					"Kƒº≈´da, veidojot nepiecie≈°amƒÅs mapes un failus. PƒÅrbaudiet lietotƒÅja atƒºaujas.", "Kƒº≈´da",
					JOptionPane.ERROR_MESSAGE);
			System.exit(1);
		}
	}

	private void copyResourceToFile(String resourceName, Path targetPath) throws IOException {
		if (!Files.exists(targetPath)) {
			try (InputStream in = getClass().getResourceAsStream("/Veidlapa/" + resourceName);
					OutputStream out = new FileOutputStream(targetPath.toFile())) {

				if (in == null) {
					throw new IOException("Resurss nav atrasts: " + resourceName);
				}

				byte[] buffer = new byte[1024];
				int length;
				while ((length = in.read(buffer)) > 0) {
					out.write(buffer, 0, length);
				}
			}
		}
	}

	private JPanel createClientInfoPanel() {
		JPanel panel = new JPanel(new BorderLayout(10, 10));
		panel.setBackground(Color.WHITE);
		panel.setBorder(createTitledBorder("Klienta informƒÅcija"));

		JPanel clientActionsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
		clientActionsPanel.setBackground(Color.WHITE);

		klientuSarakstsComboBox = new JComboBox<>();
		loadClientList();

		JButton loadClientBtn = new JButton("IelƒÅdƒìt datus");
		loadClientBtn.setFont(new Font("Segoe UI", Font.BOLD, 14));
		setupButton(loadClientBtn, new Color(220, 220, 220), new Color(255, 230, 150));
		loadClientBtn.addActionListener(e -> loadClientData());

		JButton deleteClientBtn = new JButton("üóëÔ∏è Izdzƒìst klientu");
		deleteClientBtn.setFont(new Font("Segoe UI", Font.BOLD, 14));
		setupButton(deleteClientBtn, new Color(220, 220, 220), new Color(255, 204, 204));
		deleteClientBtn.addActionListener(e -> deleteClientFile());

		clientActionsPanel.add(new JLabel("Izvƒìlƒìties klientu:"));
		clientActionsPanel.add(klientuSarakstsComboBox);
		clientActionsPanel.add(loadClientBtn);
		clientActionsPanel.add(deleteClientBtn);

		JPanel clientInfoFields = new JPanel(new GridLayout(5, 2, 10, 10));
		clientInfoFields.setBackground(Color.WHITE);
		clientInfoFields.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

		vardsUzvardsField = new JTextField();
		personasKodsField = new JTextField();
		pilniGadiField = new JTextField();
		pilniGadiField.setEditable(false);
		iestajiesSACField = new JTextField();

		String[] invaliditatesGrupas = { "", "1. invaliditƒÅtes grupa", "2. invaliditƒÅtes grupa",
				"3. invaliditƒÅtes grupa" };
		invaliditatesGrupaComboBox = new JComboBox<>(invaliditatesGrupas);

		vardsUzvardsField.addKeyListener(new FocusOnEnterListener(personasKodsField));
		personasKodsField.addKeyListener(new FocusOnEnterListener(invaliditatesGrupaComboBox));
		invaliditatesGrupaComboBox.addKeyListener(new FocusOnEnterListener(iestajiesSACField));
		iestajiesSACField.addKeyListener(new FocusOnEnterListener(gimenesArstsComboBox));

		personasKodsField.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				validatePersonasKods();
				calculateAgeFromPersonalCode();
				checkFormValidity();
			}
		});

		iestajiesSACField.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				validateDate();
				checkFormValidity();
			}
		});

		clientInfoFields.add(new JLabel("Klienta vƒÅrds un uzvƒÅrds:"));
		clientInfoFields.add(vardsUzvardsField);
		clientInfoFields.add(new JLabel("Personas kods:"));
		clientInfoFields.add(personasKodsField);
		clientInfoFields.add(new JLabel("Pilni gadi:"));
		clientInfoFields.add(pilniGadiField);
		clientInfoFields.add(new JLabel("InvaliditƒÅtes grupa:"));
		clientInfoFields.add(invaliditatesGrupaComboBox);
		clientInfoFields.add(new JLabel("IestƒÅjies SAC:"));
		clientInfoFields.add(iestajiesSACField);

		panel.add(clientActionsPanel, BorderLayout.NORTH);
		panel.add(clientInfoFields, BorderLayout.CENTER);
		return panel;
	}

	private JPanel createDoctorsPanel() {
		JPanel panel = new JPanel(new GridLayout(2, 1, 10, 10));
		panel.setBackground(Color.WHITE);
		panel.setBorder(createTitledBorder("ƒÄrstu izvƒìle"));

		// ƒ¢imenes ƒÅrsti
		JPanel gimenesArstsRow = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
		gimenesArstsRow.setBackground(Color.WHITE);
		gimenesArstsRow.add(new JLabel("ƒ¢imenes ƒÅrsts:"));

		Vector<String> gimenesArsti = loadList(GIMENES_ARSTI_FILE.toString());
		gimenesArstsComboBox = new JComboBox<>(gimenesArsti);
		gimenesArstsComboBox.setPreferredSize(new Dimension(300, 30));

		JButton addGimenesArstsBtn = new JButton("Pievienot");
		setupButton(addGimenesArstsBtn, new Color(220, 220, 220), new Color(255, 230, 150));
		addGimenesArstsBtn.addActionListener(
				e -> addNewItemToList(gimenesArstsComboBox, GIMENES_ARSTI_FILE.toString(), "ƒ¢imenes ƒÅrstu"));

		JButton deleteGimenesArstsBtn = new JButton("Dzƒìst");
		setupButton(deleteGimenesArstsBtn, new Color(220, 220, 220), new Color(255, 204, 204));
		deleteGimenesArstsBtn.addActionListener(
				e -> deleteItemFromList(gimenesArstsComboBox, GIMENES_ARSTI_FILE.toString(), "ƒ¢imenes ƒÅrstu"));

		gimenesArstsRow.add(gimenesArstsComboBox);
		gimenesArstsRow.add(addGimenesArstsBtn);
		gimenesArstsRow.add(deleteGimenesArstsBtn);

		// ƒÄrsti-psihiatri
		JPanel psihiatrsRow = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
		psihiatrsRow.setBackground(Color.WHITE);
		psihiatrsRow.add(new JLabel("ƒÄrsts-psihiatrs:"));

		Vector<String> psihiatri = loadList(PSIHIATRI_FILE.toString());
		psihiatrsComboBox = new JComboBox<>(psihiatri);
		psihiatrsComboBox.setPreferredSize(new Dimension(300, 30));

		JButton addPsihiatrsBtn = new JButton("Pievienot");
		setupButton(addPsihiatrsBtn, new Color(220, 220, 220), new Color(255, 230, 150));
		addPsihiatrsBtn.addActionListener(
				e -> addNewItemToList(psihiatrsComboBox, PSIHIATRI_FILE.toString(), "ƒÄrstu-psihiatru"));

		JButton deletePsihiatrsBtn = new JButton("Dzƒìst");
		setupButton(deletePsihiatrsBtn, new Color(220, 220, 220), new Color(255, 204, 204));
		deletePsihiatrsBtn.addActionListener(
				e -> deleteItemFromList(psihiatrsComboBox, PSIHIATRI_FILE.toString(), "ƒÄrstu-psihiatru"));

		psihiatrsRow.add(psihiatrsComboBox);
		psihiatrsRow.add(addPsihiatrsBtn);
		psihiatrsRow.add(deletePsihiatrsBtn);

		gimenesArstsComboBox.addKeyListener(new FocusOnEnterListener(psihiatrsComboBox));

		panel.add(gimenesArstsRow);
		panel.add(psihiatrsRow);

		return panel;
	}

	private JPanel createMedikamentiPanel() {
		JPanel panel = new JPanel(new BorderLayout(10, 10));
		panel.setBackground(Color.WHITE);
		panel.setBorder(createTitledBorder("Medikamenti"));

		JPanel medikamentiForm = new JPanel(new GridLayout(13, 1, 10, 5));
		medikamentiForm.setBackground(Color.WHITE);

		medikamentiList = loadList(MEDIKAMENTI_FILE.toString());

		JPanel medikamentControls = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
		medikamentControls.setBackground(Color.WHITE);

		JButton addMedikamentsBtn = new JButton("Pievienot jaunu medikamentu");
		addMedikamentsBtn.setFont(new Font("Segoe UI", Font.BOLD, 14));
		setupButton(addMedikamentsBtn, new Color(220, 220, 220), new Color(255, 230, 150));
		addMedikamentsBtn.addActionListener(e -> addNewMedikamentToList());

		medikamentControls.add(addMedikamentsBtn);

		medikamentiForm.add(medikamentControls);

		medikamentuComboBoxes = new ComboBoxWithSearch[12];
		for (int i = 0; i < 12; i++) {
			JPanel medikamentRow = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
			medikamentRow.setBackground(Color.WHITE);

			JLabel label = new JLabel("Medikaments " + (i + 1) + ":");
			medikamentRow.add(label);

			medikamentuComboBoxes[i] = new ComboBoxWithSearch(medikamentiList);
			medikamentuComboBoxes[i].setPreferredSize(new Dimension(300, 30));
			medikamentRow.add(medikamentuComboBoxes[i]);

			JButton deleteMedikamentsBtn = new JButton("üóëÔ∏è Dzƒìst");
			setupButton(deleteMedikamentsBtn, new Color(220, 220, 220), new Color(255, 204, 204));
			deleteMedikamentsBtn.addActionListener(e -> deleteMedikamentFromList(medikamentuComboBoxes[i]));
			medikamentRow.add(deleteMedikamentsBtn);

			if (i < 11) {
				medikamentuComboBoxes[i].addKeyListener(new FocusOnEnterListener(medikamentuComboBoxes[i + 1]));
			}
			medikamentiForm.add(medikamentRow);
		}

		medikamentuComboBoxes[11].addKeyListener(new FocusOnEnterListener(saveButton));

		panel.add(medikamentiForm, BorderLayout.CENTER);
		return panel;
	}

	private Border createTitledBorder(String title) {
		return BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(200, 200, 200)), title, 0, 2,
				new Font("Segoe UI", Font.BOLD, 18), new Color(50, 50, 50));
	}

	private void addValidationListeners() {
		vardsUzvardsField.setBackground(mandatoryFieldColor);
		personasKodsField.setBackground(mandatoryFieldColor);

		vardsUzvardsField.setToolTipText("≈†is lauks ir obligƒÅti jƒÅaizpilda.");
		personasKodsField.setToolTipText("≈†is lauks ir obligƒÅti jƒÅaizpilda.");
		iestajiesSACField.setToolTipText("Ievadiet datumu formƒÅtƒÅ 'dd.MM.yyyy'.");

		DocumentListener documentListener = new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				checkFormValidity();
			}

			public void removeUpdate(DocumentEvent e) {
				checkFormValidity();
			}

			public void changedUpdate(DocumentEvent e) {
				checkFormValidity();
			}
		};

		vardsUzvardsField.getDocument().addDocumentListener(documentListener);
		personasKodsField.getDocument().addDocumentListener(documentListener);
		iestajiesSACField.getDocument().addDocumentListener(documentListener);
	}

	private void checkFormValidity() {
		boolean isVardsUzvardsValid = !vardsUzvardsField.getText().trim().isEmpty();
		boolean isPersonasKodsValid = personasKodsPattern.matcher(personasKodsField.getText().trim()).matches();
		boolean isIestajiesSACValid = validateDate(false);

		vardsUzvardsField.setBackground(isVardsUzvardsValid ? Color.WHITE : mandatoryFieldColor);
		personasKodsField.setBackground(isPersonasKodsValid ? Color.WHITE : mandatoryFieldColor);
		iestajiesSACField
				.setBackground(isIestajiesSACValid || iestajiesSACField.getText().isEmpty() ? Color.WHITE : errorColor);

		saveButton.setEnabled(isVardsUzvardsValid && isPersonasKodsValid && isIestajiesSACValid);
	}

	private boolean validateDate(boolean showError) {
		String dateText = iestajiesSACField.getText().trim();
		if (dateText.isEmpty()) {
			if (showError) {
				showStatus("Datuma lauks ir tuk≈°s, l≈´dzu ievadiet datumu.", true);
			}
			return true;
		}

		try {
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
			LocalDate.parse(dateText, formatter);
			showStatus("Gatavs.", false);
			return true;
		} catch (DateTimeParseException e) {
			if (showError) {
				Toolkit.getDefaultToolkit().beep();
				showStatus("Kƒº≈´da: Ievadiet derƒ´gu datumu formƒÅtƒÅ 'dd.MM.yyyy'.", true);
			}
			return false;
		}
	}

	private void validateDate() {
		String dateText = iestajiesSACField.getText().trim();
		if (!dateText.isEmpty()) {
			try {
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
				LocalDate.parse(dateText, formatter);
				iestajiesSACField.setBackground(Color.WHITE);
				showStatus("Gatavs.", false);
			} catch (DateTimeParseException e) {
				iestajiesSACField.setBackground(errorColor);
				Toolkit.getDefaultToolkit().beep();
				showStatus("Kƒº≈´da: Ievadiet derƒ´gu datumu formƒÅtƒÅ 'dd.MM.yyyy'.", true);
			}
		} else {
package Veidlapa;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class MedicinasVeidlapa extends JFrame {

	private static final long serialVersionUID = 1L;

	// Dinamiskie ceƒºi, kas pielƒÅgojas jebkuram datoram
	private static final Path DESKTOP_PATH = Paths.get(System.getProperty("user.home"), "Desktop");
	private static final Path BASE_DIRECTORY = DESKTOP_PATH.resolve("MedicinaSlimnicaVeidlapas");
	private static final Path EXCEL_TEMPLATE_PATH = BASE_DIRECTORY.resolve("Medicina_slimnƒ´cai.xlsx");
	private static final Path OUTPUT_DIRECTORY = BASE_DIRECTORY.resolve("IzveidotƒÅs_Veidlapas");
	private static final Path GIMENES_ARSTI_FILE = BASE_DIRECTORY.resolve("gimenes_arsti.txt");
	private static final Path PSIHIATRI_FILE = BASE_DIRECTORY.resolve("arsti_psihiatri.txt");
	private static final Path MEDIKAMENTI_FILE = BASE_DIRECTORY.resolve("medikamenti.txt");
	private static final Path PREFERENCES_FILE = BASE_DIRECTORY.resolve("app_preferences.txt");

	private Vector<String> medikamentiList;

	private ComboBoxWithSearch activeMedikamentComboBox = null;

	private JTextField vardsUzvardsField;
	private JTextField personasKodsField;
	private JTextField pilniGadiField;
	private JComboBox<String> invaliditatesGrupaComboBox;
	private JTextField iestajiesSACField;
	private JComboBox<String> gimenesArstsComboBox;
	private JComboBox<String> psihiatrsComboBox;

	private ComboBoxWithSearch[] medikamentuComboBoxes;
	private JComboBox<String> klientuSarakstsComboBox;

	private JButton saveButton;
	private JLabel statusBar;
	private final Color mandatoryFieldColor = new Color(255, 255, 204); // Gai≈°i dzeltens
	private final Color errorColor = new Color(255, 204, 204); // Gai≈°i sarkans
	private final Pattern personasKodsPattern = Pattern.compile("\\d{6}-\\d{5}");

	public MedicinasVeidlapa() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Nodro≈°ina failu un mapju esamƒ´bu
		
		setupApplicationFoldersAndFiles();

		Font lielaksFonts = new Font("Arial", Font.BOLD, 18);
		UIManager.put("Label.font", lielaksFonts);
		UIManager.put("TextField.font", lielaksFonts);
		UIManager.put("ComboBox.font", lielaksFonts);
		UIManager.put("Button.font", lielaksFonts);
		UIManager.put("TitledBorder.font", lielaksFonts.deriveFont(Font.PLAIN, 16));

		setTitle("Medicƒ´nas Veidlapa");
		loadPreferences();
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		setLocationRelativeTo(null);
		setLayout(new BorderLayout(10, 10));

		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				int result = JOptionPane.showConfirmDialog(MedicinasVeidlapa.this,
						"Vai tie≈°ƒÅm vƒìlaties aizvƒìrt programmu?", "ApstiprinƒÅt aizvƒìr≈°anu", JOptionPane.YES_NO_OPTION);
				if (result == JOptionPane.YES_OPTION) {
					savePreferences();
					dispose();
				}
			}

			@Override
			public void windowDeactivated(WindowEvent e) {
				savePreferences();
			}
		});

		statusBar = new JLabel("Gatavs.");
		statusBar.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		statusBar.setFont(new Font("Arial", Font.ITALIC, 12));

		JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
		mainPanel.setBackground(new Color(240, 248, 255)); // gai≈°i zils
		mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

		JPanel formPanel = new JPanel();
		formPanel.setBackground(new Color(255, 255, 255)); // balts
		formPanel.setLayout(new BorderLayout(10, 10));

		JPanel clientInfoPanel = createClientInfoPanel();
		JPanel doctorsPanel = createDoctorsPanel();
		JPanel medikamentiPanel = createMedikamentiPanel();

		JPanel topSectionPanel = new JPanel(new GridLayout(2, 1, 10, 10));
		topSectionPanel.setOpaque(false); // Make it transparent to show mainPanel background
		topSectionPanel.add(clientInfoPanel);
		topSectionPanel.add(doctorsPanel);

		formPanel.add(topSectionPanel, BorderLayout.NORTH);
		formPanel.add(medikamentiPanel, BorderLayout.CENTER);

		JScrollPane scrollPane = new JScrollPane(formPanel);
		scrollPane.getVerticalScrollBar().setUnitIncrement(16);

		mainPanel.add(scrollPane, BorderLayout.CENTER);

		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		buttonPanel.setBackground(new Color(240, 248, 255)); // gai≈°i zils
		saveButton = new JButton("üíæ SaglabƒÅt veidlapu");
		saveButton.setBackground(new Color(144, 238, 144)); // gai≈°i zaƒº≈°
		saveButton.setForeground(Color.BLACK);
		saveButton.addActionListener(new SaveActionListener());
		saveButton.setEnabled(false);

		JButton viewButton = new JButton("üìÑ Apskatƒ´t veidlapu");
		viewButton.setBackground(new Color(173, 216, 230)); // gai≈°i zils
		viewButton.setForeground(Color.BLACK);
		viewButton.addActionListener(new ViewActionListener());

		JButton printButton = new JButton("üñ®Ô∏è DrukƒÅt veidlapu");
		printButton.setBackground(new Color(255, 228, 181)); // gai≈°i oran≈æs
		printButton.setForeground(Color.BLACK);
		printButton.addActionListener(new PrintActionListener());

		JButton helpButton = new JButton("‚ÑπÔ∏è Palƒ´dzƒ´ba");
		helpButton.addActionListener(e -> {
			JOptionPane.showMessageDialog(this,
					"1. Aizpildiet visus laukus.\n" + "2. Spiediet 'SaglabƒÅt veidlapu'.\n"
							+ "3. Ja nepiecie≈°ams, varat drukƒÅt vai apskatƒ´t veidlapu.\n\n"
							+ "JautƒÅjumu gadƒ´jumƒÅ jautƒÅjiet vadƒ´tƒÅjam vai kolƒìƒ£iem.",
					"Palƒ´dzƒ´ba", JOptionPane.INFORMATION_MESSAGE);
		});
		buttonPanel.add(helpButton);

		addHelpTooltip(vardsUzvardsField, "Ievadiet klienta vƒÅrdu un uzvƒÅrdu.");
		addHelpTooltip(personasKodsField, "Ievadiet klienta personas kodu formƒÅtƒÅ 'ddmmyy-xxxxx'.");
		addHelpTooltip(iestajiesSACField, "Ievadiet datumu, kad klients iestƒÅjies SAC.");
		addHelpTooltip(pilniGadiField, "Klienta vecums tiek aprƒìƒ∑inƒÅts automƒÅtiski pƒìc personas koda.");
		addHelpTooltip(invaliditatesGrupaComboBox, "Izvƒìlieties, ja klientam pie≈°ƒ∑irta invaliditƒÅte.");
		addHelpTooltip(gimenesArstsComboBox, "Izvƒìlieties klienta ƒ£imenes ƒÅrstu vai pievienojiet jaunu.");
		addHelpTooltip(psihiatrsComboBox, "Izvƒìlieties ƒÅrstƒìjo≈°o psihiatru, ja tƒÅds ir.");

		buttonPanel.add(saveButton);
		buttonPanel.add(viewButton);
		buttonPanel.add(printButton);

		JPanel bottomPanel = new JPanel(new BorderLayout());
		bottomPanel.setBackground(new Color(240, 248, 255));
		bottomPanel.add(buttonPanel, BorderLayout.CENTER);
		bottomPanel.add(statusBar, BorderLayout.SOUTH);

		add(mainPanel, BorderLayout.CENTER);
		add(bottomPanel, BorderLayout.SOUTH);

		addValidationListeners();
		checkFormValidity();

		SwingUtilities.invokeLater(() -> vardsUzvardsField.requestFocusInWindow());
	}

	// Jauna metode, kas r≈´pƒìjas par mapju un failu esamƒ´bu pirmajƒÅ palai≈°anas reizƒì
	private void setupApplicationFoldersAndFiles() {
		try {
			Files.createDirectories(BASE_DIRECTORY);
			Files.createDirectories(OUTPUT_DIRECTORY);

			copyResourceToFile("Medicina_slimnƒ´cai.xlsx", EXCEL_TEMPLATE_PATH);
			copyResourceToFile("gimenes_arsti.txt", GIMENES_ARSTI_FILE);
			copyResourceToFile("arsti_psihiatri.txt", PSIHIATRI_FILE);
			copyResourceToFile("medikamenti.txt", MEDIKAMENTI_FILE);
		} catch (IOException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this,
					"Kƒº≈´da, veidojot nepiecie≈°amƒÅs mapes un failus. PƒÅrbaudiet lietotƒÅja atƒºaujas.", "Kƒº≈´da",
					JOptionPane.ERROR_MESSAGE);
			System.exit(1);
		}
	}

	// Metode resursu kopƒì≈°anai no JAR faila uz cieto disku
	private void copyResourceToFile(String resourceName, Path targetPath) throws IOException {
		if (!Files.exists(targetPath)) {
			try (InputStream in = getClass().getResourceAsStream("/Veidlapa/" + resourceName);
					OutputStream out = new FileOutputStream(targetPath.toFile())) {

				if (in == null) {
					// Atkrƒ´t, ja fails neeksistƒì JAR resursos
					throw new IOException("Resurss nav atrasts: " + resourceName);
				}

				byte[] buffer = new byte[1024];
				int length;
				while ((length = in.read(buffer)) > 0) {
					out.write(buffer, 0, length);
				}
			}
		}
	}

	private JPanel createClientInfoPanel() {
		JPanel panel = new JPanel(new BorderLayout(10, 10));
		panel.setBackground(new Color(245, 255, 250)); // mentola zaƒº≈°

		JPanel loadClientPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
		loadClientPanel.setBackground(new Color(245, 255, 250)); // mentola zaƒº≈°
		klientuSarakstsComboBox = new JComboBox<>();
		loadClientList();
		JButton loadClientBtn = new JButton("IelƒÅdƒìt datus");
		loadClientBtn.addActionListener(e -> loadClientData());
		loadClientPanel.add(new JLabel("Izvƒìlƒìties klientu:"));
		loadClientPanel.add(klientuSarakstsComboBox);
		loadClientPanel.add(loadClientBtn);

		JPanel clientInfoFields = new JPanel(new GridLayout(5, 2, 10, 10));
		clientInfoFields.setBackground(new Color(245, 255, 250)); // mentola zaƒº≈°
		clientInfoFields.setBorder(BorderFactory.createTitledBorder("Klienta informƒÅcija"));

		vardsUzvardsField = new JTextField();
		personasKodsField = new JTextField();
		pilniGadiField = new JTextField();
		pilniGadiField.setEditable(false);
		iestajiesSACField = new JTextField();

		String[] invaliditatesGrupas = { "", "1. invaliditƒÅtes grupa", "2. invaliditƒÅtes grupa",
				"3. invaliditƒÅtes grupa" };
		invaliditatesGrupaComboBox = new JComboBox<>(invaliditatesGrupas);

		vardsUzvardsField.addKeyListener(new FocusOnEnterListener(personasKodsField));
		personasKodsField.addKeyListener(new FocusOnEnterListener(invaliditatesGrupaComboBox));
		invaliditatesGrupaComboBox.addKeyListener(new FocusOnEnterListener(iestajiesSACField));
		iestajiesSACField.addKeyListener(new FocusOnEnterListener(gimenesArstsComboBox));

		personasKodsField.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				validatePersonasKods();
				calculateAgeFromPersonalCode();
				checkFormValidity();
			}
		});

		iestajiesSACField.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				validateDate();
				checkFormValidity();
			}
		});

		clientInfoFields.add(new JLabel("Klienta vƒÅrds un uzvƒÅrds:"));
		clientInfoFields.add(vardsUzvardsField);
		clientInfoFields.add(new JLabel("Personas kods:"));
		clientInfoFields.add(personasKodsField);
		clientInfoFields.add(new JLabel("Pilni gadi:"));
		clientInfoFields.add(pilniGadiField);
		clientInfoFields.add(new JLabel("InvaliditƒÅtes grupa:"));
		clientInfoFields.add(invaliditatesGrupaComboBox);
		clientInfoFields.add(new JLabel("IestƒÅjies SAC:"));
		clientInfoFields.add(iestajiesSACField);

		panel.add(loadClientPanel, BorderLayout.NORTH);
		panel.add(clientInfoFields, BorderLayout.CENTER);
		return panel;
	}

	private JPanel createDoctorsPanel() {
		JPanel panel = new JPanel(new GridLayout(2, 3, 10, 10));
		panel.setBackground(new Color(245, 255, 250)); // mentola zaƒº≈°
		panel.setBorder(BorderFactory.createTitledBorder("ƒÄrstu izvƒìle"));

		Vector<String> gimenesArsti = loadList(GIMENES_ARSTI_FILE.toString());
		gimenesArstsComboBox = new JComboBox<>(gimenesArsti);
		JButton addGimenesArstsBtn = new JButton("Pievienot ƒ¢imenes ƒÅrstu");
		addGimenesArstsBtn.addActionListener(
				e -> addNewItemToList(gimenesArstsComboBox, GIMENES_ARSTI_FILE.toString(), "ƒ¢imenes ƒÅrstu"));

		Vector<String> psihiatri = loadList(PSIHIATRI_FILE.toString());
		psihiatrsComboBox = new JComboBox<>(psihiatri);
		JButton addPsihiatrsBtn = new JButton("Pievienot Psihiatru");
		addPsihiatrsBtn.addActionListener(
				e -> addNewItemToList(psihiatrsComboBox, PSIHIATRI_FILE.toString(), "ƒÄrstu-psihiatru"));

		gimenesArstsComboBox.addKeyListener(new FocusOnEnterListener(psihiatrsComboBox));

		panel.add(new JLabel("ƒ¢imenes ƒÅrsts:"));
		panel.add(gimenesArstsComboBox);
		panel.add(addGimenesArstsBtn);
		panel.add(new JLabel("ƒÄrsts-psihiatrs:"));
		panel.add(psihiatrsComboBox);
		panel.add(addPsihiatrsBtn);

		return panel;
	}

	private JPanel createMedikamentiPanel() {
		JPanel panel = new JPanel(new BorderLayout(10, 10));
		panel.setBackground(new Color(255, 255, 240)); // viegli dzeltens
		JPanel medikamentiForm = new JPanel(new GridLayout(7, 4, 10, 10));
		medikamentiForm.setBackground(new Color(255, 255, 240));
		medikamentiForm.setBorder(BorderFactory.createTitledBorder("Medikamenti"));

		medikamentiList = loadList(MEDIKAMENTI_FILE.toString());
		JButton addMedikamentsBtn = new JButton("Pievienot jaunu medikamentu");
		addMedikamentsBtn.addActionListener(e -> addNewMedikamentToList());

		medikamentiForm.add(new JLabel(""));
		medikamentiForm.add(addMedikamentsBtn);

		medikamentuComboBoxes = new ComboBoxWithSearch[12];
		for (int i = 0; i < 12; i++) {
			medikamentuComboBoxes[i] = new ComboBoxWithSearch(medikamentiList);
			medikamentiForm.add(new JLabel("Medikaments " + (i + 1) + ":"));
			medikamentiForm.add(medikamentuComboBoxes[i]);

			int finalI = i;
			medikamentuComboBoxes[i].addFocusListener(new FocusAdapter() {
				@Override
				public void focusGained(FocusEvent e) {
					activeMedikamentComboBox = medikamentuComboBoxes[finalI];
				}

				@Override
				public void focusLost(FocusEvent e) {
					if (e.getOppositeComponent() instanceof JComboBox) {
						activeMedikamentComboBox = null;
					}
				}
			});

			if (i < 11) {
				medikamentuComboBoxes[i].addKeyListener(new FocusOnEnterListener(medikamentuComboBoxes[i + 1]));
			}
		}

		medikamentuComboBoxes[11].addKeyListener(new FocusOnEnterListener(saveButton));

		panel.add(medikamentiForm, BorderLayout.CENTER);
		return panel;
	}

	private void addValidationListeners() {
		vardsUzvardsField.setBackground(mandatoryFieldColor);
		personasKodsField.setBackground(mandatoryFieldColor);
		vardsUzvardsField.setToolTipText("≈†is lauks ir obligƒÅti jƒÅaizpilda.");
		personasKodsField.setToolTipText("≈†is lauks ir obligƒÅti jƒÅaizpilda.");

		DocumentListener documentListener = new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				checkFormValidity();
			}

			public void removeUpdate(DocumentEvent e) {
				checkFormValidity();
			}

			public void changedUpdate(DocumentEvent e) {
				checkFormValidity();
			}
		};

		vardsUzvardsField.getDocument().addDocumentListener(documentListener);
		personasKodsField.getDocument().addDocumentListener(documentListener);
		iestajiesSACField.getDocument().addDocumentListener(documentListener);
	}

	private void addHelpTooltip(JComponent component, String text) {
		component.setToolTipText(text);
	}

	private void checkFormValidity() {
		boolean isVardsUzvardsValid = !vardsUzvardsField.getText().trim().isEmpty();
		boolean isPersonasKodsValid = personasKodsPattern.matcher(personasKodsField.getText().trim()).matches();
		boolean isIestajiesSACValid = validateDate(false);

		vardsUzvardsField.setBackground(isVardsUzvardsValid ? Color.WHITE : mandatoryFieldColor);
		personasKodsField.setBackground(isPersonasKodsValid ? Color.WHITE : mandatoryFieldColor);
		iestajiesSACField
				.setBackground(isIestajiesSACValid || iestajiesSACField.getText().isEmpty() ? Color.WHITE : errorColor);

		saveButton.setEnabled(isVardsUzvardsValid && isPersonasKodsValid && isIestajiesSACValid);
	}

	private boolean validateDate(boolean showError) {
		String dateText = iestajiesSACField.getText().trim();
		if (dateText.isEmpty()) {
			if (showError) {
				showStatus("Datuma lauks ir tuk≈°s, l≈´dzu ievadiet datumu.", true);
			}
			return true;
		}

		try {
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
			LocalDate.parse(dateText, formatter);
			showStatus("Gatavs.", false);
			return true;
		} catch (DateTimeParseException e) {
			if (showError) {
				Toolkit.getDefaultToolkit().beep();
				showStatus("Kƒº≈´da: Ievadiet derƒ´gu datumu formƒÅtƒÅ 'dd.MM.yyyy'.", true);
			}
			return false;
		}
	}

	private void validateDate() {
		String dateText = iestajiesSACField.getText().trim();
		if (!dateText.isEmpty()) {
			try {
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
				LocalDate.parse(dateText, formatter);
				iestajiesSACField.setBackground(Color.WHITE);
				showStatus("Gatavs.", false);
			} catch (DateTimeParseException e) {
				iestajiesSACField.setBackground(errorColor);
				Toolkit.getDefaultToolkit().beep();
				showStatus("Kƒº≈´da: Ievadiet derƒ´gu datumu formƒÅtƒÅ 'dd.MM.yyyy'.", true);
			}
		} else {
			iestajiesSACField.setBackground(Color.WHITE);
		}
	}

	private void validatePersonasKods() {
		String pk = personasKodsField.getText().trim();
		if (!pk.isEmpty() && !personasKodsPattern.matcher(pk).matches()) {
			personasKodsField.setBackground(errorColor);
			Toolkit.getDefaultToolkit().beep();
			showStatus("Kƒº≈´da: Personas koda formƒÅts nav pareizs. JƒÅb≈´t 'ddmmyy-xxxxx'.", true);
		} else {
			personasKodsField.setBackground(Color.WHITE);
			showStatus("Gatavs.", false);
		}
	}

	private void showStatus(String message, boolean isError) {
		statusBar.setText((isError ? "‚ö†Ô∏è " : "‚úÖ ") + message);
		statusBar.setForeground(isError ? Color.RED : new Color(0, 102, 0)); // tum≈°i zaƒº≈°, ja nav kƒº≈´das

		if (isError) {
			Timer timer = new Timer(5000, e -> {
				statusBar.setText("Gatavs.");
				statusBar.setForeground(Color.BLACK);
			});
			timer.setRepeats(false);
			timer.start();
		}
	}

	private void calculateAgeFromPersonalCode() {
		String pk = personasKodsField.getText().trim();
		if (personasKodsPattern.matcher(pk).matches()) {
			try {
				String datePart = pk.substring(0, 6);
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyy");
				LocalDate birthDate = LocalDate.parse(datePart, formatter);

				if (birthDate.isAfter(LocalDate.now())) {
					birthDate = birthDate.minusYears(100);
				}

				long years = ChronoUnit.YEARS.between(birthDate, LocalDate.now());
				pilniGadiField.setText(String.valueOf(years));
			} catch (Exception e) {
				pilniGadiField.setText("Kƒº≈´da");
			}
		} else {
			pilniGadiField.setText("");
		}
	}

	private void loadClientList() {
		try {
			Files.createDirectories(OUTPUT_DIRECTORY);
			File outputDir = OUTPUT_DIRECTORY.toFile();
			File[] files = outputDir.listFiles((dir, name) -> name.toLowerCase().endsWith(".xlsx"));
			klientuSarakstsComboBox.removeAllItems();
			klientuSarakstsComboBox.addItem("");
			if (files != null) {
				for (File file : files) {
					klientuSarakstsComboBox.addItem(file.getName());
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void loadClientData() {
		String selectedFile = (String) klientuSarakstsComboBox.getSelectedItem();
		if (selectedFile == null || selectedFile.isEmpty()) {
			return;
		}

		try (FileInputStream fis = new FileInputStream(OUTPUT_DIRECTORY.resolve(selectedFile).toFile());
				XSSFWorkbook workbook = new XSSFWorkbook(fis)) {

			Sheet sheet = workbook.getSheet("Hospitalizacija");
			if (sheet == null) {
				showStatus("Lapa 'Hospitalizacija' netika atrasta failƒÅ.", true);
				return;
			}

			vardsUzvardsField.setText(getCellValue(sheet, "B5"));
			personasKodsField.setText(getCellValue(sheet, "C5"));
			pilniGadiField.setText(getCellValue(sheet, "D5"));
			invaliditatesGrupaComboBox.setSelectedItem(getCellValue(sheet, "C7"));
			iestajiesSACField.setText(getCellValue(sheet, "C1"));
			gimenesArstsComboBox.setSelectedItem(getCellValue(sheet, "A9"));
			psihiatrsComboBox.setSelectedItem(getCellValue(sheet, "C9"));

			String[] medikamentuCells = { "A31", "A32", "A33", "A34", "A35", "A36", "C31", "C32", "C33", "C34", "C35",
					"C36" };
			for (int i = 0; i < medikamentuComboBoxes.length; i++) {
				medikamentuComboBoxes[i].setSelectedItem(getCellValue(sheet, medikamentuCells[i]));
			}

			showStatus("Dati veiksmƒ´gi ielƒÅdƒìti.", false);
			checkFormValidity();
		} catch (Exception ex) {
			showStatus("Kƒº≈´da datu ielƒÅdes laikƒÅ: " + ex.getMessage(), true);
			ex.printStackTrace();
		}
	}

	private String getCellValue(Sheet sheet, String cellAddress) {
		CellReference cr = new CellReference(cellAddress);
		Row row = sheet.getRow(cr.getRow());
		if (row != null) {
			Cell cell = row.getCell(cr.getCol());
			if (cell != null) {
				if (cell.getCellType() == CellType.NUMERIC) {
					return String.valueOf((int) cell.getNumericCellValue());
				} else {
					return cell.getStringCellValue();
				}
			}
		}
		return "";
	}

	private Vector<String> loadList(String filename) {
		Vector<String> list = new Vector<>();
		Set<String> seenItems = new HashSet<>();
		list.add("");
		seenItems.add("");

		try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
			String line;
			while ((line = br.readLine()) != null) {
				String trimmedLine = line.trim();
				if (!trimmedLine.isEmpty() && seenItems.add(trimmedLine.toLowerCase())) {
					list.add(trimmedLine);
				}
			}
			Collections.sort(list, String.CASE_INSENSITIVE_ORDER);
		} catch (IOException e) {
			System.err.println("Fails " + filename + " nav atrasts, tiks izveidots jauns.");
		}
		return list;
	}

	private void addNewItemToList(JComboBox<String> comboBox, String filename, String itemType) {
		String newItem = JOptionPane.showInputDialog(this, "Ievadiet jaunu " + itemType + ":");
		if (newItem != null && !newItem.trim().isEmpty()) {
			if (!comboBoxContains(comboBox, newItem)) {
				comboBox.addItem(newItem);
				saveList(comboBox, filename);
				comboBox.setSelectedItem(newItem);
				showStatus(itemType + " '" + newItem + "' veiksmƒ´gi pievienots.", false);
			} else {
				Toolkit.getDefaultToolkit().beep();
				showStatus("≈†ƒÅds " + itemType + " jau eksistƒì.", true);
			}
		}
	}

	private void addNewMedikamentToList() {
		String newItem = JOptionPane.showInputDialog(this, "Ievadiet jaunu medikamentu:");
		if (newItem != null && !newItem.trim().isEmpty()) {
			boolean exists = medikamentiList.stream().anyMatch(item -> item.equalsIgnoreCase(newItem.trim()));

			if (!exists) {
				medikamentiList.add(newItem.trim());
				Collections.sort(medikamentiList, String.CASE_INSENSITIVE_ORDER);
				saveList(medikamentiList, MEDIKAMENTI_FILE.toString());

				for (ComboBoxWithSearch comboBox : medikamentuComboBoxes) {
					comboBox.refreshModel();
				}

				if (activeMedikamentComboBox != null) {
					activeMedikamentComboBox.setSelectedItem(newItem.trim());
					activeMedikamentComboBox.requestFocus(); // saglabƒÅ fokusu
				} else {
					showStatus("Medikaments pievienots. Izvƒìlies vƒìlamo laukƒÅ.", false);
				}

				showStatus("Jauns medikaments pievienots sarakstam.", false);
			} else {
				Toolkit.getDefaultToolkit().beep();
				showStatus("≈†ƒÅds medikaments jau eksistƒì.", true);
			}
		}
	}

	private boolean comboBoxContains(JComboBox<String> comboBox, String item) {
		for (int i = 0; i < comboBox.getItemCount(); i++) {
			if (comboBox.getItemAt(i).equalsIgnoreCase(item.trim())) {
				return true;
			}
		}
		return false;
	}

	private void saveList(JComboBox<String> comboBox, String filename) {
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
			for (int i = 0; i < comboBox.getItemCount(); i++) {
				String item = comboBox.getItemAt(i);
				if (!item.isEmpty()) {
					bw.write(item);
					bw.newLine();
				}
			}
		} catch (IOException e) {
			showStatus("NeizdevƒÅs saglabƒÅt datus: " + filename, true);
			e.printStackTrace();
		}
	}

	private void saveList(Vector<String> list, String filename) {
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
			for (String item : list) {
				if (!item.isEmpty()) {
					bw.write(item);
					bw.newLine();
				}
			}
		} catch (IOException e) {
			showStatus("NeizdevƒÅs saglabƒÅt datus: " + filename, true);
			e.printStackTrace();
		}
	}

	private void clearForm() {
		vardsUzvardsField.setText("");
		personasKodsField.setText("");
		pilniGadiField.setText("");
		invaliditatesGrupaComboBox.setSelectedIndex(0);
		iestajiesSACField.setText("");
		gimenesArstsComboBox.setSelectedIndex(0);
		psihiatrsComboBox.setSelectedIndex(0);
		for (ComboBoxWithSearch comboBox : medikamentuComboBoxes) {
			comboBox.setSelectedItem("");
		}
		checkFormValidity();
		showStatus("Gatavs.", false);
	}

	private class SaveActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			try {
				if (!saveButton.isEnabled()) {
					Toolkit.getDefaultToolkit().beep();
					showStatus("L≈´dzu aizpildiet visus obligƒÅtos laukus, pirms saglabƒÅ≈°anas.", true);
					return;
				}

				Files.createDirectories(OUTPUT_DIRECTORY);

				String fileName = vardsUzvardsField.getText().replaceAll("\\s+", "_") + "_"
						+ personasKodsField.getText().replaceAll("\\s+", "_") + "_veidlapa.xlsx";

				try (FileInputStream fis = new FileInputStream(EXCEL_TEMPLATE_PATH.toFile());
						XSSFWorkbook workbook = new XSSFWorkbook(fis);
						FileOutputStream fos = new FileOutputStream(OUTPUT_DIRECTORY.resolve(fileName).toFile())) {

					Sheet sheet = workbook.getSheet("Hospitalizacija");
					if (sheet == null) {
						throw new IllegalArgumentException("Lapa 'Hospitalizacija' netika atrasta.");
					}

					setCellValue(sheet, "B5", vardsUzvardsField.getText());
					setCellValue(sheet, "C5", personasKodsField.getText());
					setCellValue(sheet, "D5", pilniGadiField.getText());
					setCellValue(sheet, "C7", (String) invaliditatesGrupaComboBox.getSelectedItem());
					setCellValue(sheet, "C1", iestajiesSACField.getText());
					setCellValue(sheet, "A9", (String) gimenesArstsComboBox.getSelectedItem());
					setCellValue(sheet, "C9", (String) psihiatrsComboBox.getSelectedItem());

					String[] medikamentuCells = { "A31", "A32", "A33", "A34", "A35", "A36", "C31", "C32", "C33", "C34",
							"C35", "C36" };
					for (int i = 0; i < medikamentuComboBoxes.length; i++) {
						setCellValue(sheet, medikamentuCells[i], (String) medikamentuComboBoxes[i].getSelectedItem());
					}

					workbook.write(fos);
				}

				showStatus("Veidlapa veiksmƒ´gi saglabƒÅta: " + fileName, false);
				int choice = JOptionPane.showConfirmDialog(MedicinasVeidlapa.this, "SaglabƒÅts! Vai notƒ´rƒ´t formu?",
						"Tƒ´rƒ´t formu?", JOptionPane.YES_NO_OPTION);
				if (choice == JOptionPane.YES_OPTION) {
					clearForm();
				}
				loadClientList();

			} catch (Exception ex) {
				showStatus("Kƒº≈´da saglabƒÅ≈°anas laikƒÅ: " + ex.getMessage(), true);
				ex.printStackTrace();
			}
		}

		private void setCellValue(Sheet sheet, String cellAddress, String value) {
			CellReference cr = new CellReference(cellAddress);
			Row row = sheet.getRow(cr.getRow());
			if (row == null) {
				row = sheet.createRow(cr.getRow());
			}
			Cell cell = row.getCell(cr.getCol());
			if (cell == null) {
				cell = row.createCell(cr.getCol());
			}
			cell.setCellValue(value);
		}
	}

	private class ViewActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			String selectedFile = (String) klientuSarakstsComboBox.getSelectedItem();
			if (selectedFile == null || selectedFile.isEmpty()) {
				Toolkit.getDefaultToolkit().beep();
				showStatus("L≈´dzu, izvƒìlieties klientu, lai apskatƒ´tu veidlapu.", true);
				return;
			}

			File file = OUTPUT_DIRECTORY.resolve(selectedFile).toFile();
			if (file.exists()) {
				try {
					Desktop.getDesktop().open(file);
				} catch (IOException ex) {
					showStatus("Kƒº≈´da atverot failu: " + ex.getMessage(), true);
				}
			} else {
				showStatus("Fails netika atrasts.", true);
			}
		}
	}

	private class PrintActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			String selectedFile = (String) klientuSarakstsComboBox.getSelectedItem();
			if (selectedFile == null || selectedFile.isEmpty()) {
				Toolkit.getDefaultToolkit().beep();
				showStatus("L≈´dzu, izvƒìlieties klientu, lai drukƒÅtu veidlapu.", true);
				return;
			}

			File file = OUTPUT_DIRECTORY.resolve(selectedFile).toFile();
			if (file.exists()) {
				try {
					Desktop.getDesktop().print(file);
				} catch (IOException ex) {
					showStatus("Kƒº≈´da drukƒÅ≈°anas laikƒÅ: " + ex.getMessage(), true);
				}
			} else {
				showStatus("Fails netika atrasts.", true);
			}
		}
	}

	private class ComboBoxWithSearch extends JComboBox<String> {
		private final Vector<String> originalItems;
		private final JTextComponent editor;
		private boolean isUpdatingModel = false;
		private boolean isProgrammaticSelection = false;

		public ComboBoxWithSearch(Vector<String> items) {
			super(new DefaultComboBoxModel<>(new Vector<>(items)));
			this.originalItems = new Vector<>(items);

			setEditable(true);
			this.editor = (JTextComponent) getEditor().getEditorComponent();

			editor.getDocument().addDocumentListener(new DocumentListener() {
				public void insertUpdate(DocumentEvent e) {
					if (!isUpdatingModel) {
						SwingUtilities.invokeLater(() -> filterItems(editor.getText()));
					}
				}

				public void removeUpdate(DocumentEvent e) {
					if (!isUpdatingModel) {
						SwingUtilities.invokeLater(() -> filterItems(editor.getText()));
					}
				}

				public void changedUpdate(DocumentEvent e) {
				}
			});

			editor.addKeyListener(new KeyAdapter() {
				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_ENTER) {
						Object selected = getSelectedItem();
						if (selected != null && !selected.toString().isEmpty()) {
							editor.setText(selected.toString());
						}
						setPopupVisible(false);
						transferFocus();
					} else if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
						setPopupVisible(false);
					}
				}
			});

			editor.addFocusListener(new FocusAdapter() {
				@Override
				public void focusLost(FocusEvent e) {
					if (!isProgrammaticSelection) {
						String currentText = editor.getText().trim();
						boolean found = originalItems.stream().anyMatch(item -> item.equalsIgnoreCase(currentText));

						if (currentText.isEmpty()) {
							setSelectedItem("");
						} else if (!found) {
							editor.setText("");
							setSelectedItem("");
						} else {
							originalItems.stream().filter(item -> item.equalsIgnoreCase(currentText)).findFirst()
									.ifPresent(item -> editor.setText(item));
						}
					}
					setPopupVisible(false);
				}

				@Override
				public void focusGained(FocusEvent e) {
					setPopupVisible(true);
				}
			});
		}

		private void filterItems(String filterText) {
			String lowercaseFilter = filterText.toLowerCase();
			Vector<String> filteredItems = originalItems.stream()
					.filter(item -> item.toLowerCase().contains(lowercaseFilter))
					.collect(Collectors.toCollection(Vector::new));

			isUpdatingModel = true;
			DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(filteredItems);
			setModel(model);
			editor.setText(filterText);
			isUpdatingModel = false;

			if (!filterText.isEmpty()) {
				setPopupVisible(true);
			}
		}

		public void refreshModel() {
			isUpdatingModel = true;
			DefaultComboBoxModel<String> newModel = new DefaultComboBoxModel<>(originalItems);
			setModel(newModel);
			isUpdatingModel = false;
		}

		@Override
		public void setSelectedItem(Object anObject) {
			isProgrammaticSelection = true;
			super.setSelectedItem(anObject);
			isProgrammaticSelection = false;
			if (anObject != null) {
				editor.setText(anObject.toString());
			} else {
				editor.setText("");
			}
		}
	}

	private class FocusOnEnterListener extends KeyAdapter {
		private final JComponent nextComponent;

		public FocusOnEnterListener(JComponent nextComponent) {
			this.nextComponent = nextComponent;
		}

		@Override
		public void keyPressed(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_ENTER) {
				if (nextComponent instanceof JComboBox) {
					((JComboBox<?>) nextComponent).requestFocusInWindow();
				} else {
					nextComponent.requestFocusInWindow();
				}
			}
		}
	}

	private void savePreferences() {
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(PREFERENCES_FILE.toFile()))) {
			bw.write("width=" + getWidth());
			bw.newLine();
			bw.write("height=" + getHeight());
			bw.newLine();
			bw.write("x=" + getX());
			bw.newLine();
			bw.write("y=" + getY());
			bw.newLine();
		} catch (IOException e) {
			System.err.println("NeizdevƒÅs saglabƒÅt programmas iestatƒ´jumus.");
		}
	}

	private void loadPreferences() {
		File prefsFile = PREFERENCES_FILE.toFile();
		if (prefsFile.exists()) {
			try (BufferedReader br = new BufferedReader(new FileReader(prefsFile))) {
				int width = -1, height = -1, x = -1, y = -1;
				String line;
				while ((line = br.readLine()) != null) {
					if (line.startsWith("width=")) {
						width = Integer.parseInt(line.substring(6));
					} else if (line.startsWith("height=")) {
						height = Integer.parseInt(line.substring(7));
					} else if (line.startsWith("x=")) {
						x = Integer.parseInt(line.substring(2));
					} else if (line.startsWith("y=")) {
						y = Integer.parseInt(line.substring(2));
					}
				}
				if (width != -1 && height != -1) {
					setSize(width, height);
				} else {
					setSize(1200, 900);
				}
				if (x != -1 && y != -1) {
					setLocation(x, y);
				} else {
					setLocationRelativeTo(null);
				}
			} catch (IOException | NumberFormatException e) {
				System.err.println("Kƒº≈´da iestatƒ´jumu ielƒÅdƒì≈°anƒÅ, izmantoti noklusƒìjuma iestatƒ´jumi.");
				setSize(1200, 900);
				setLocationRelativeTo(null);
			}
		} else {
			setSize(1200, 900);
			setLocationRelativeTo(null);
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(() -> {
			new MedicinasVeidlapa().setVisible(true);
		});
	}
}